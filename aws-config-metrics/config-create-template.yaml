AWSTemplateFormatVersion: "2010-09-09"
Description: "Lets test the config rule"
Parameters:
  DeploymentTagKey:
    Type: String
    Default: "config-metrics"
  DeploymentTagValue:
    Type: String
    Default: "config-metrics"
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "MetricsLambdaRole"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Description: String
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSConfigRulesExecutionRole
      Tags:
        - Key: !Ref DeploymentTagKey
          Value: !Ref DeploymentTagValue

  ValidationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ValidationLambdaFunction
      Code:
        ZipFile: |
          #
          # This file made available under CC0 1.0 Universal (https://creativecommons.org/publicdomain/zero/1.0/legalcode)
          #
          # Ensure that resources have required tags, and that tags have valid values.
          #
          # Trigger Type: Change Triggered
          # Scope of Changes: EC2:Instance
          # Accepted Parameters: requiredTagKey1, requiredTagValues1, requiredTagKey2, ...
          # Example Values: 'CostCenter', 'R&D,Ops', 'Environment', 'Stage,Dev,Prod', ...
          #                 An asterisk '*' as the value will just check that any value is set for that key


          import json
          import boto3


          # Specify desired resource types to validate
          APPLICABLE_RESOURCES = ["AWS::EC2::Volume"]

          # Iterate through required tags ensureing each required tag is present, 
          # and value is one of the given valid values
          def find_violation(current_tags, required_tags):
              violation = ""
              for rtag,rvalues in required_tags.items():
                  tag_present = False
                  for tag in current_tags:
                      if tag['key'] == rtag:
                          value_match = False
                          tag_present = True
                          rvaluesplit = rvalues.split(",")
                          for rvalue in rvaluesplit:
                              if tag['value'] == rvalue:
                                  value_match = True
                              if tag['value'] != "":
                                  if rvalue == "*":
                                      value_match = True
                          if value_match == False:
                              violation = violation + "\n" + tag['value'] + " doesn't match any of " + required_tags[rtag] + "!"
                  if not tag_present:
                      violation = violation + "\n" + "Tag " + str(rtag) + " is not present."
              if violation == "":
                  return None
              return  violation

          def evaluate_compliance(configuration_item, rule_parameters):
              if configuration_item["resourceType"] not in APPLICABLE_RESOURCES:
                  return {
                      "compliance_type": "NOT_APPLICABLE",
                      "annotation": "The rule doesn't apply to resources of type " +
                      configuration_item["resourceType"] + "."
                  }

              if configuration_item["configurationItemStatus"] == "ResourceDeleted":
                  return {
                      "compliance_type": "NOT_APPLICABLE",
                      "annotation": "The configurationItem was deleted and therefore cannot be validated."
                  }

              current_tags = configuration_item["configuration"].get("tags")
              violation = find_violation(current_tags, rule_parameters)        

              if violation:
                  return {
                      "compliance_type": "NON_COMPLIANT",
                      "annotation": violation
                  }

              return {
                  "compliance_type": "COMPLIANT",
                  "annotation": "This resource is compliant with the rule."
              }

          def lambda_handler(event, context):
              print(event)

              if 'invokingEvent' not in event:
                print("Does not have invokingEvent in  event")
                return

              invoking_event = json.loads(event["invokingEvent"])
              
              if 'configurationItem' not in invoking_event:
                print("Does not have configurationItem in invoking_event")
                return

              configuration_item = invoking_event["configurationItem"]

              if 'ruleParameters' not in event:
                print("Does not have ruleParameters in event")
                return

              rule_parameters = json.loads(event["ruleParameters"])

              result_token = "No token found."
              if "resultToken" in event:
                  result_token = event["resultToken"]

              evaluation = evaluate_compliance(configuration_item, rule_parameters)

              config = boto3.client("config")
              config.put_evaluations(
                  Evaluations=[
                      {
                          "ComplianceResourceType":
                              configuration_item["resourceType"],
                          "ComplianceResourceId":
                              configuration_item["resourceId"],
                          "ComplianceType":
                              evaluation["compliance_type"],
                          "Annotation":
                              evaluation["annotation"],
                          "OrderingTimestamp":
                              configuration_item["configurationItemCaptureTime"]
                      },
                  ],
                  ResultToken=result_token
              )
      Handler: index.lambda_handler
      Runtime: python3.7
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - LambdaExecutionRole
          - Arn
      Timeout: 60
      Tags:
        - Key: !Ref DeploymentTagKey
          Value: !Ref DeploymentTagValue

  ConfigRuleForEC2Volumes:
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: volumes-prod-tags
      Description: Expecting the volume to have defined tags
      InputParameters: { "costcenter": "ccoe,developer" }
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::Volume
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
          - EventSource: "aws.config"
            MessageType: "ConfigurationItemChangeNotification"
        SourceIdentifier:
          Fn::GetAtt:
            - ValidationLambda
            - Arn

  ConfigPermissionToCallLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Fn::GetAtt:
          - ValidationLambda
          - Arn
      Action: "lambda:InvokeFunction"
      Principal: "config.amazonaws.com"
      SourceAccount: !Ref "AWS::AccountId"
